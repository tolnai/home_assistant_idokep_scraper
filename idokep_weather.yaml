# https://www.home-assistant.io/integrations/weather.template/
# https://developers.home-assistant.io/docs/core/entity/weather/
#weather:
- platform: template
  unique_id: idokep
  name: "Időkép"
  condition_template: "{{ states('sensor.idokep_condition') }}"
  temperature_template: "{{ states('sensor.idokep_temperature')}}"
  forecast_template: >
    {{
      [
        {
          "datetime": states('sensor.idokep_day1_date'),
          "temperature": states('sensor.idokep_day1_max') | float,
          "templow": states('sensor.idokep_day1_min') | float,
          "precipitation": states('sensor.idokep_day1_prec') | float,
          "condition": states('sensor.idokep_day1_condition')
        },
        {
          "datetime": states('sensor.idokep_day2_date'),
          "temperature": states('sensor.idokep_day2_max') | float,
          "templow": states('sensor.idokep_day2_min') | float,
          "precipitation": states('sensor.idokep_day2_prec') | float,
          "condition": states('sensor.idokep_day2_condition')
        },
        {
          "datetime": states('sensor.idokep_day3_date'),
          "temperature": states('sensor.idokep_day3_max') | float,
          "templow": states('sensor.idokep_day3_min') | float,
          "precipitation": states('sensor.idokep_day3_prec') | float,
          "condition": states('sensor.idokep_day3_condition')
        },
        {
          "datetime": states('sensor.idokep_day4_date'),
          "temperature": states('sensor.idokep_day4_max') | float,
          "templow": states('sensor.idokep_day4_min') | float,
          "precipitation": states('sensor.idokep_day4_prec') | float,
          "condition": states('sensor.idokep_day4_condition')
        },
        {
          "datetime": states('sensor.idokep_day5_date'),
          "temperature": states('sensor.idokep_day5_max') | float,
          "templow": states('sensor.idokep_day5_min') | float,
          "precipitation": states('sensor.idokep_day5_prec') | float,
          "condition": states('sensor.idokep_day5_condition')
        }
      ]
    }}
  humidity_template: "{{ state_attr('weather.otthon', 'humidity') }}"
  pressure_template: "{{ state_attr('weather.otthon', 'pressure') }}"
  wind_speed_template: "{{ state_attr('weather.otthon', 'wind_speed') }}"
  wind_bearing_template: "{{ state_attr('weather.otthon', 'wind_bearing') }}"
